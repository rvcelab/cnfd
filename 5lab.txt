package com.lab.prg5;



import org.hibernate.validator.constraints.Length;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotEmpty;

public class Product {
	
	
	@Min(value = 0)
	@Max(value = 200)
	int id;
	
	
	@Min(value = 0)
	@Max(value = 200)
	int price;
	
	
	
	@NotEmpty
	@Length(max=200)
	String name;
	
	
	
	
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	
	
	@Override
	public String toString() {
		return "Product [id=" + id + ", price=" + price + ", name=" + name + "]";
	}
	

}



package com.lab.prg5;

import java.util.ArrayList;
import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/product")

public class ProductController {
	
	List<Product> plist = new ArrayList<Product>();
	
	@GetMapping
	public List<Product> getProduct(){
		return plist;
	}
	@PostMapping
	public ResponseEntity<?> postProduct(@Valid @RequestBody Product product, BindingResult results){
		List<String> errors = new ArrayList<String>();
		if(results.hasErrors()) {
			for(FieldError error: results.getFieldErrors()) {
				errors.add(error.getField()+" "+error.getDefaultMessage());	
				
			}
			return ResponseEntity.badRequest().body(errors);
		}else {
			plist.add(product);
			return ResponseEntity.ok(plist);
		}
	}
	
	@DeleteMapping("/{id}")
	public List<Product> deleteProduct(@PathVariable int id){
		for (Product p:plist) {
			if(id ==p.getId()) {
				plist.remove(p);
				
			}
			
		}
		return plist;
		
	}
	@PutMapping
	public List<Product> getProduct(@RequestBody Product product){
		for(Product p: plist) {
			if(product.getId()==p.getId()) {
				p.setName(product.getName());
				p.setPrice(product.getPrice());
				break;
			}
		}
		return plist;
	}
	
	

}
